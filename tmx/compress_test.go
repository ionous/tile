package tmx

import (
	"github.com/ionous/tile/tiled"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestDecompress2(t *testing.T) {
	src := EmbeddedData{
		Encoding:    "base64",
		Compression: "zlib",
		Content:     "eJxjYBgFpIJ4KuBRs0bNGjWLOmZRCwAA97dLtQ==",
	}
	width, height := 19, 17
	out := make([]tiled.Tile, width*height)
	e := src.Decompress(out)
	assert.NoError(t, e)
}

func TestDecompress(t *testing.T) {
	src := EmbeddedData{
		Encoding:    "base64",
		Compression: "zlib",
		Content:     compressedData,
	}
	width, height := 27, 23
	out := make([]tiled.Tile, width*height)
	if e := src.Decompress(out); assert.NoError(t, e) {
		ref, rows := rawData, out
		for y := 0; y < height; y++ {
			if assert.NoError(t, e) {
				for x, v := range ref[:width] {
					res, src := rows[x], tiled.Tile(v)
					if res != src {
						t.Fatalf("Values don't match (%dx%d) %v!= %v", x, y, res, src)
					}
				}
			}
			ref, rows = ref[width:], rows[width:]
		}
		assert.Len(t, ref, 0, "should be out of bytes")
	}
}

var compressedData = `eJytlE1KA0EQhYtkAko0blUU3Puv6Hm8h/Ev/iQxXsFtQNRFdJGt4AHUhXod3zDdpPJS3T1gBj5maqaqX71Kd1o1kZbjGDTBiYtPwRk4Vzk5F+5+GYjLwDVX4BrcUF4bdEA3EJeBa25BD9wFfMZinpEF1/fVN/YZi625sj7Xa232GYutubI+17N2n/oLPVs+LP2YF+4v9Fx2f1petL7uL/Qc25/ar+WF9VPzCu0Hy+9DQr/svKz3qX3zCJ7AM5iR8XwrzpmVyXVD/nXeALyAV1CXdJwzJ+M9cv8h3RUZrbEONhJsOi3dA/fP811C/jJYVFpbYDvBjtPSV+o/MfejvU5DS6/n5+v9aK+W1oEjpeX3jF7Pz3dVCrTX//jyv4Fez2t49F6ahpZej7V4P++CPfCB+FPxVSve5+xHtAbG7Dx1ogIa4Bu5P6CXFfff4hy/VWV0viwtvc6aQVXGz+gwK7hX+HfzrpeFiFbFfR9mk/j6BuUcihx5rDpLy+u80/fU1UZ+B3RL1P0BRxb7zA==`

var rawData = []int{
	1410, 1410, 1410, 1403, 1404, 1405, 1410, 1406, 1407, 1408, 1410, 1410, 1410, 1409, 1410, 1411, 1410, 1409, 1410, 1411, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
	1410, 1410, 1410, 1409, 1410, 1411, 1410, 1412, 1413, 1414, 1410, 1410, 1410, 1415, 1416, 1417, 1410, 1415, 1416, 1417, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
	1410, 1410, 1410, 1415, 1416, 1417, 1410, 1418, 1419, 1420, 1410, 1406, 1407, 1408, 1410, 1406, 1407, 1408, 1410, 1406, 1407, 1408, 1403, 1404, 1405, 1410, 1410,
	1410, 1410, 1410, 1410, 1406, 1407, 1408, 1410, 1446, 1410, 1410, 1412, 1413, 1414, 1410, 1412, 1413, 1414, 1410, 1412, 1413, 1414, 1409, 1410, 1411, 1410, 1410,
	1403, 1404, 1405, 1410, 1412, 1413, 1414, 1410, 1406, 1407, 1408, 1418, 1419, 1420, 1410, 1418, 1419, 1420, 1410, 1418, 1419, 1420, 1415, 1416, 1417, 1410, 1410,
	1409, 1410, 1411, 1410, 1418, 1419, 1420, 1410, 1412, 1413, 1414, 1410, 1446, 1403, 1404, 1405, 1403, 1404, 1405, 1403, 1404, 1405, 1410, 1403, 1404, 1405, 1410,
	1415, 1416, 1417, 1410, 1410, 1406, 1407, 1408, 1418, 1419, 1420, 1410, 1410, 1409, 1410, 1411, 1409, 1410, 1411, 1409, 1410, 1411, 1410, 1409, 1410, 1411, 1410,
	1410, 1410, 1410, 1410, 1410, 1412, 1413, 1414, 1410, 1446, 1406, 1407, 1408, 1415, 1416, 1417, 1415, 1416, 1417, 1415, 1416, 1417, 1410, 1415, 1416, 1417, 1410,
	1410, 1410, 1403, 1404, 1405, 1418, 1419, 1420, 1410, 1410, 1412, 1413, 1414, 1410, 1403, 1404, 1405, 1410, 1403, 1404, 1405, 1410, 1410, 1410, 1403, 1404, 1405,
	1410, 1410, 1409, 1410, 1411, 1410, 1449, 1403, 1404, 1405, 1418, 1419, 1420, 1410, 1409, 1410, 1411, 1410, 1409, 1410, 1411, 1410, 1410, 1410, 1409, 1410, 1411,
	1410, 1410, 1415, 1416, 1417, 1410, 1410, 1409, 1410, 1411, 1451, 1452, 1453, 8, 1415, 1416, 1417, 8, 1415, 1416, 1417, 8, 8, 9, 1415, 1416, 1417,
	1410, 1403, 1404, 1405, 1410, 1410, 1410, 1415, 1416, 1417, 1457, 1458, 1459, 11, 1457, 1458, 1459, 11, 1457, 1458, 1459, 11, 11, 12, 1451, 1452, 1453,
	1410, 1409, 1410, 1411, 1403, 1404, 1405, 1410, 1410, 1410, 28, 11, 11, 43, 44, 44, 44, 44, 44, 44, 44, 44, 45, 12, 1457, 1458, 1459,
	1410, 1415, 1416, 1417, 1409, 1410, 1411, 1410, 25, 26, 24, 11, 11, 46, 47, 47, 47, 47, 47, 47, 47, 47, 48, 12, 0, 0, 0,
	1410, 1410, 1410, 1410, 1415, 1416, 1417, 1410, 28, 1403, 1404, 1405, 11, 46, 47, 47, 47, 47, 47, 47, 47, 47, 48, 12, 0, 0, 0,
	1410, 1410, 1403, 1404, 1405, 1452, 1453, 26, 24, 1409, 1410, 1411, 11, 46, 47, 47, 47, 53, 53, 47, 47, 47, 48, 12, 0, 0, 0,
	8, 8, 1409, 1410, 1411, 1458, 1459, 29, 29, 1415, 1416, 1417, 11, 46, 47, 47, 47, 47, 47, 47, 47, 47, 48, 12, 0, 0, 0,
	11, 11, 1415, 1416, 1417, 29, 29, 29, 29, 1451, 1452, 1453, 11, 46, 47, 47, 47, 47, 47, 47, 47, 47, 48, 12, 0, 0, 0,
	11, 11, 1451, 1452, 1453, 29, 29, 29, 29, 1457, 1458, 1459, 11, 49, 50, 1487, 1488, 1488, 1488, 1489, 50, 50, 51, 12, 0, 0, 0,
	11, 11, 1457, 1458, 1459, 29, 29, 29, 29, 11, 11, 11, 11, 2, 14, 1493, 1494, 1163, 1494, 1495, -1073741816, 3, 11, 12, 0, 0, 0,
	11, 11, 11, 11, 2, 32, 32, 32, 32, 32, 3, 11, 11, 12, 1207, 1207, 1181, 1181, 1181, 1207, 1207, 13, 14, 15, 0, 0, 0,
	11, 11, 11, 2, 15, 1207, 1207, 1207, 1207, 1207, 13, 14, 14, 15, 1207, 1207, 1610612790, 1610612790, 1610612790, 1207, 1207, 1207, 1207, 1207, 0, 0, 0,
	11, 11, 2, 15, 1219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1159, 1160, 1161, 0, 0, 0, 0, 0, 0, 0, 0,
}
